const express = require('express');
const cors = require('cors');

// user.id is autogenerated from v4 random uuid
const { v4: uuidv4 } = require('uuid');

// Express HTTP server listen on port 3333 (server.js), using cors and json.
const app = express();
app.use(cors());
app.use(express.json());

const users = []

/* 
// Users array starts with example for testing purposes.
const users = [{ 
    id: uuidv4(), // shall be an uuid
    name: 'John Doe', 
    username: 'john.doe', 
    todos: [{ // array of todo items.
      "id": "79a8010e-eba9-4cae-ba7c-6a621bcce227",
      "title": "Be happy",
      "done": false,
      "deadline": "2022-10-28T00:00:00.000Z",
    }] 
  }
];
 */

function checksExistsUserAccount(request, response, next) {
  // Receives username in the request headers.
  const { username } = request.headers;
  // Find some element in the "users" array where username matchs
  const user = users.find(e => e.username === username);
  //If not, bad request status 400
  if (!username) {
    return response.status(400).json({ error: 'Bad Request, needs username header and value.' });
  } else if (!user) {
    return response.status(404).json({ error: 'User not found.' });
  } else { 
    // add object to request to reuse
    request.user = user;
    // walk on...
    return next();
  }
}

app.post('/users', (request, response) => {
  // Receives 'name' and 'username' from request body
  const { name, username } = request.body;

  // If username already in users, returns HTTP 403 response with error message
  if (users.some(user => user.username === username)) {
    response.status(400).json({ error: 'Username already exists' });
  } else {
    // Else, build user object
    const newUser = {
      id: uuidv4(),
      name,
      username,
      todos: []
    };
    //Adds an user object into the 'users' array
    users.push(newUser)

    // Returns HTTP 201 respose with user created.
    return response.status(201).json(newUser);
  }
});

app.get('/todos', checksExistsUserAccount, (request, response) => {
  //if user exists, checksExistsUserAccount returns the user object
  const { user } = request;
  //Returns user "todo"s array.
  return response.status(200).json(user.todos)
});

app.post('/todos', checksExistsUserAccount, (request, response) => {
  // checksExistsUserAccount returns matching user
  const { user } = request;

  // Receives a "title"(string) and "deadline"(date) in the request body
  const { title, deadline } = request.body;

  // Build new todo object
  const newTodo = {
    id: uuidv4(), // uuidv4()
    title: title, //string
    done: false, // !important, always starts false
    deadline: new Date(deadline),  // in header, date format input is 'YYYY-MM-DD'
    created_at: new Date() // 
  }
  
  // Push object to user's todos array 
  user.todos.push(newTodo);
  
  //Return created todo with 201 response status.
  return response.status(201).json(newTodo);

});

app.put('/todos/:id', checksExistsUserAccount, (request, response) => {
  // Receives username in the request headers
  // checksExistsUserAccount returns user object.
  const { user } = request;
  
  // Receives "title" and "deadline" in the request body
  const { title, deadline } = request.body;
  
  // Receives "id" in the route parameters
  const { id } = request.params;
  
  // Find the todo object in the array
  const todo = user.todos.find(e => e.id === id);
  
  // If not found, bad request status 400
  if (!todo) {
     //If todo/id doesn't exists? To create or reject request? Choosing the second.
    return response.status(404).json({ error: 'Todo not found.' });
  
  // Else, update todo with matching id
  } else {
    // Reassign object value. Not functional, but works.
    todo.title = title;
    todo.deadline = deadline;
    
    // Return the updated todo with response status code 201
    return response.status(200).json(todo);
  }
});

app.patch('/todos/:id/done', checksExistsUserAccount, (request, response) => {
  // Receives username in request header. ChecksExistsUserAccount returns user object.
  const { user } = request;
  
  // Receives "id" in the route parameters
  const { id } = request.params;
  
  // Find the todo object in the array
  const todo = user.todos.find(e => e.id === id);
  
  // If not found, response code status 404
  if (!todo) {
    return response.status(404).json({ error: 'Todo not found.' });
  
  // Else,
  } else {
    // assign "true" as value for "done" propriety.
    todo.done = true;

    // return response status code updated/patched.
    return response.status(200).json(todo);
  }
});

app.delete('/todos/:id', checksExistsUserAccount, (request, response) => {
  // Receives username as request header and checksExistsUserAccount returns user object.
  const { user } = request;
  
  // Receives "id" in the route parameters
  const { id } = request.params;

  // Find the todo object in the array, must be Index to Splice latter.
  const todoIndex = user.todos.findIndex(e => e.id === id);
  
  // If not found, bad request status 400. Must be 0 or higher position.
  if (todoIndex === -1 ) {
    return response.status(404).json({ error: 'Todo not found.' });

  // Else,
  } else {
    // Deletes only the object matching id
    user.todos.splice(todoIndex, 1);
    // Returns response status code 204 without response body.
    return response.status(204).end();
  }
});

module.exports = app;